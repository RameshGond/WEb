package com.xworkz.collection;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Predicate;
import java.util.stream.Collectors;

public class BagRunner {

	public static void main(String[] args) {
//		List<String> bag = new ArrayList<String>();
//		bag.add("American Tourister");
//		bag.add("Backpack");
//		bag.add("Kelly");
//		bag.add("Hobo Bag");
//		bag.add("Satchel");
//		
//		for(String str : bag) {
//			System.out.println(str);
//		}
		System.out.println("hello");
		
		List<String> country = new LinkedList<String>();
		country.add("India");
		country.add("China");
		country.add("United States");
		country.add("Indonesia");
		country.add("Pakistan");
		country.add("Brazil");
		country.add("Nigeria");
		country.add("Bangladesh");
		country.add("Russia");
		country.add("Mexico");
		country.add("Japan");
		country.add("Egypt");
		country.add("Vietnam");
		country.add("DR Congo");
		country.add("Turkey");
		country.add("Iran");
		country.add("Germany");
		country.add("Thailand");
		country.add("United Kingdom");
		country.add("France");
		country.add("Italy");
		country.add("Tanzania");
		country.add("South Africa");
		country.add("Myanmar");
		country.add("Kenya");
		country.add("South Korea");
		country.add("Colombia");
		country.add("Spain");
		country.add("Uganda");
		country.add("Argentina");
		country.add("Algeria");
		country.add("Sudan");
		country.add("Ukraine");
		country.add("Iraq");
		country.add("Poland");
		country.add("Canada");
		country.add("Morocco");
		country.add("Saudi Arabia");
		country.add("Uzbekistan");
		country.add("Peru");
		country.add("Angola");
		country.add("Angola");
		country.add("Mozambique");
		country.add("Ghana");
		country.add("Yemen");
		country.add("Nepal");
		country.add("Venezuela");
		country.add("Madagascar");
		country.add("Cameroon");
		country.add("Côte d'Ivoire");
		country.add("North Korea");
		country.add("Australia");
		country.add("Niger");
		country.add("Sri Lanka");
		country.add("Burkina Faso");
		country.add("Mali");
		country.add("Romania");
		country.add("Malawi");
		country.add("Chile");
		country.add("Kazakhstan");
		country.add("Zambia");
		country.add("Guatemala");
		country.add("Ecuador");
		country.add("Syria");
		country.add("Netherlands");
		country.add("Senegal");
		country.add("Cambodia");
		country.add("Chad");
		country.add("Somalia");
		country.add("Zimbabwe");
		country.add("Guinea");
		country.add("Rwanda");
		country.add("Benin");
		country.add("Burundi");
		country.add("Tunisia");
		country.add("Bolivia");
		country.add("Belgium");
		country.add("Haiti");
		country.add("Cuba");
		country.add("South Sudan");
		country.add("Dominican Republic");
		country.add("Czech Republic");
		country.add("Greece");
		country.add("Jordan");
		country.add("Portugal");
		country.add("Azerbaijan");
		country.add("Sweden");
		country.add("Honduras");
		country.add("United Arab Emirates");
		country.add("Hungary");
		country.add("Tajikistan");
		country.add("Belarus");
		country.add("Austria");
		country.add("Papua New Guinea");
		country.add("Serbia");
		country.add("Israel");
		country.add("Switzerland");
		country.add("Togo");
		country.add("Sierra Leone");
		country.add("Laos");
		country.add("Paraguay");
		country.add("Bulgaria");
		country.add("Libya");
		country.add("Lebanon");
		country.add("Kyrgyzstan");
		country.add("El Salvador");
		country.add("Turkmenistan");
		country.add("Singapore");
		country.add("Denmark");
		country.add("Finland");
		country.add("Congo");
		country.add("Slovakia");
		country.add("Norway");
		country.add("Oman");
		country.add("State of Palestine");
		country.add("Costa Rica");
		country.add("Liberia");
		country.add("Ireland");
		country.add("Central African Republic");
		country.add("New Zealand");
		country.add("Mauritania");
		country.add("Panama");
		country.add("Kuwait");
		country.add("Croatia");
		country.add("Moldova");
		country.add("Georgia");
		country.add("Eritrea");
		country.add("Uruguay");
		country.add("Bosnia and Herzegovina");
		country.add("Mongolia");
		country.add("Armenia");
		country.add("Jamaica");
		country.add("Qatar");
		country.add("Albania");
		country.add("Lithuania");
		country.add("Namibia");
		country.add("Gambia");
		country.add("Botswana");
		country.add("Gabon");
		country.add("Lesotho");
		country.add("North Macedonia");
		country.add("Slovenia");
		country.add("Guinea-Bissau");
		country.add("Latvia");
		country.add("Bahrain");
		country.add("Equatorial Guinea");
		country.add("Trinidad and Tobago");
		country.add("Estonia");
		country.add("Timor-Leste");
		country.add("Mauritius");
		country.add("Cyprus");
		country.add("Eswatini");
		country.add("Djibouti");
		country.add("Fiji");
		country.add("Comoros");
		country.add("Guyana");
		country.add("Bhutan");
		country.add("Solomon Islands");
		country.add("Montenegro");
		country.add("Luxembourg");
		country.add("Suriname");
		country.add("Cabo Verde");
		country.add("Micronesia");
		country.add("Maldives");
		country.add("Malta");
		country.add("Brunei");
		country.add("Belize");
		country.add("Bahamas");
		country.add("Iceland");
		country.add("Vanuatu");
		country.add("Barbados");
		country.add("Sao Tome & Principe");
		country.add("Samoa");
		country.add("Saint Lucia");
		country.add("Kiribati");
		country.add("Grenada");
		country.add("St. Vincent & Grenadines");
		country.add("Tonga");
		country.add("Seychelles");
		country.add("Antigua and Barbuda");
		country.add("Andorra");
		country.add("Dominica");
		country.add("Marshall Islands");
		country.add("Saint Kitts & Nevis");
		country.add("Monaco");
		country.add("Liechtenstein");
		country.add("San Marino");
		country.add("Palau");
		country.add("Tuvalu");
		country.add("Nauru");
		country.add("Holy See");

		Predicate<String> predicate = (string) -> {
			return string.endsWith("a");
		};

		List<String> result = country.stream().filter(predicate).collect(Collectors.toList());

		System.out.println(result);

	}

}
